/**
 * Test des types du systÃ¨me de thÃ¨me
 * Ce fichier teste la cohÃ©rence des types TypeScript
 */

import type { 
  ThemeMode, 
  ThemeContextType,
  ThemeProviderProps 
} from '@/theme';

import type {
  StringRecord,
  ColorScale,
  FontSizeTuple,
  FontWeightValue
} from '@/theme/interface';

// Test 1: VÃ©rification des types de base
console.log('ðŸ§ª Test des types de base');

const testMode: ThemeMode = 'light';
console.log('âœ… ThemeMode:', testMode);

// Test 2: VÃ©rification des types de couleurs
console.log('\nðŸ§ª Test des types de couleurs');

const testColorScale: ColorScale = {
  50: '#fafafa',
  100: '#f5f5f5',
  200: '#e5e5e5',
  300: '#d4d4d4',
  400: '#a3a3a3',
  500: '#737373',
  600: '#525252',
  700: '#404040',
  800: '#262626',
  900: '#171717',
  950: '#0a0a0a',
};
console.log('âœ… ColorScale dÃ©fini correctement');

// Test 3: VÃ©rification des types de typographie
console.log('\nðŸ§ª Test des types de typographie');

const testFontSize: FontSizeTuple = ['16px', { lineHeight: '24px' }];
const testFontWeight: FontWeightValue = '400';
console.log('âœ… FontSizeTuple:', testFontSize);
console.log('âœ… FontWeightValue:', testFontWeight);

// Test 4: VÃ©rification des types de contexte
console.log('\nðŸ§ª Test des types de contexte');

const testContextType: Partial<ThemeContextType> = {
  mode: 'dark',
  toggleTheme: () => console.log('toggle'),
  setTheme: (mode: ThemeMode) => console.log('set to', mode)
};
console.log('âœ… ThemeContextType dÃ©fini correctement');

const testProviderProps: Partial<ThemeProviderProps> = {
  defaultTheme: 'light'
};
console.log('âœ… ThemeProviderProps dÃ©fini correctement');

// Test 5: VÃ©rification des types utilitaires
console.log('\nðŸ§ª Test des types utilitaires');

const testStringRecord: StringRecord = {
  key1: 'value1',
  key2: 'value2'
};
console.log('âœ… StringRecord dÃ©fini correctement');

console.log('\nðŸŽ‰ Tous les tests de types sont passÃ©s !');

export {};